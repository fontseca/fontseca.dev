package pages

import(
  "fontseca.dev/components/layout"
  "fontseca.dev/model"
  "fontseca.dev/transfer"
  "strconv"
  "fmt"
  "time"
)

func getOGArticleURL(article *model.Article) string {
  u := "https://fontseca.dev/"
  if nil == article.Topic || nil == article.PublishedAt {
    return u
  }
  year := strconv.Itoa(article.PublishedAt.Year())
  month := strconv.Itoa(int(article.PublishedAt.Month()))
  return fmt.Sprint(u, "archive/", article.Topic.ID, "/", year, "/", month, "/", article.Slug)
}

func getOGImageAlt(article *model.Article) string {
  if nil == article.CoverCap {
    return article.Summary
  }
  return *article.CoverCap
}

func getOGPublishedTime(article *model.Article) string {
  if nil == article.PublishedAt {
    return time.Date(0, 0, 0, 0, 0, 0, 0, time.UTC).Format(time.RFC3339)
  }
  return article.PublishedAt.Format(time.RFC3339)
}

templ Article(article *model.Article) {
  if nil != article {
    @layout.Layout(article.Title, 3, transfer.OG{
      Description: article.Summary,
      ImageURL: article.CoverURL,
      ImageAlt: getOGImageAlt(article),
      Type: "article",
      ArticlePublishedTime: getOGPublishedTime(article),
      ArticleAuthor: article.Author,
      ArticlePublisher: "https://fontseca.dev/archive",
      URL: getOGArticleURL(article), }) {
      <section class="article-post">
        <section class="info-section">
        <div class="title-and-summary">
          <header>
            <a href="/archive" class="go-back-indicator">Go back to archive</a>
            <h1 class="title">{ article.Title }</h1>
          </header>
          <div class="metadata">
            <p class="summary">{ article.Summary }</p>
            <div class="options">
              <span style="font-weight: 500;">
                  if nil != article.Topic && nil != article.PublishedAt {
                    <time>
                      <a style="font-weight: 500;"
                         href={ templ.SafeURL(fmt.Sprint("/archive/any/", article.PublishedAt.Year(), "/", int(article.PublishedAt.Month()))) }>
                         { article.PublishedAt.Format("Jan 02, 2006") }
                      </a>
                    </time>
                  } else {
                    { "Draft" }
                  }
              </span>
              <span style="font-weight: 500;">
                if nil != article.Topic {
                  <a style="font-weight: 500;" href={ templ.SafeURL(fmt.Sprint("/archive/", article.Topic.ID)) }>{ article.Topic.Name }</a>
                } else {
                  { "No topic" }
                }
              </span>
              <span>
                <a style="font-weight: 800;" href="/playground?target=/me.get" target="_blank">{ "@" + article.Author }</a>
              </span>
            </div>
          </div>
        </div>
        <div class="article-cover">
          <figure>
            <div class="image-container">
              if nil != article.CoverCap {
                <img src={ article.CoverURL } alt={ *article.CoverCap } />
              } else {
                <img src={ article.CoverURL } alt={ article.Summary }/>
              }
            </div>
            if nil != article.CoverCap {
              <figcaption>
                <small>{ *article.CoverCap }</small>
              </figcaption>
            }
          </figure>
        </div>
        </section>
        <section class="post-content-section post-content-receiver-container">
          <header class="post-header">
            <button type="button" class="link-copier">
              Copy link
            </button>
            <p class="bar"></p>
            <p class="readtime has-phosphor-icon">{ strconv.Itoa(article.ReadTime) } min</p>
            if len(article.DownloadFiles) > 0 {
              <p class="bar"></p>
              for _, f := range article.DownloadFiles {
                <span class="file-span"><a class="link-normal has-phosphor-icon" target="_blank" href={ templ.SafeURL(f.FileLink) } download="filename">{ f.Lang }</a></span>
              }
            }

          </header>
          <article class={ "content", templ.KV("add-border", 0 < len(article.Tags)) }>
            {! templ.Raw(md2html(article.Content)) }
          </article>
          if 0 < len(article.Tags) {
            <article class="tags-container">
              <header>
                <h3>Tags</h3>
              </header>

              <div class="tags-list">
                for _, t := range article.Tags {
                  if nil != t {
                    <span class="tag icon-tag">
                      <a href={ templ.SafeURL(fmt.Sprint("/archive/tag/", t.ID)) }>{ t.Name }</a>
                    </span>
                  }
                }
              </div>
            </article>
          }
        </section>
      </section>
    }
  }
}
